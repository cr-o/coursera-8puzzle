See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (10 warnings)
PMD:          FAILED (14 warnings)
Checkstyle:   FAILED (0 errors, 1 warning)

Correctness:  24/51 tests passed
Memory:       15/22 tests passed
Timing:       3/125 tests passed

Aggregate score: 45.53%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
6.4K Feb 28 02:48 Board.java
5.5K Feb 28 02:48 Solver.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac11 Board.java
*-----------------------------------------------------------

% javac11 Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'boardTiles', exposing the internal representation of the class 'Board'. Instead, create a defensive copy of the object referenced by the parameter variable 'tiles' and store that copy in the instance variable 'boardTiles'.  At Board.java:[line 20]
M D UC_USELESS_OBJECT UC: The object stored in the variable 'solvedBoard' is created and modified, but its value never goes outside of the method 'main()' or produces any side effect.  At Board.java:[line 195]
M D UC_USELESS_OBJECT UC: The object stored in the variable 'solved' is created and modified, but its value never goes outside of the method 'main()' or produces any side effect.  At Board.java:[line 194]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'twin' but that value is never used.  At Board.java:[line 192]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'manhattan' but that value is never used.  At Board.java:[line 197]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'bl' but that value is never used.  At Board.java:[line 193]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'it' but that value is never used.  At Board.java:[line 191]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'hamming' but that value is never used.  At Board.java:[line 198]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'b2' but that value is never used.  At Board.java:[line 196]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'manhattanPriority' is never read. Consider removing it from the class.  At Solver.java:[line 83]
Warnings generated: 10


================================================================


% pmd .
*-----------------------------------------------------------
Board.java:16: The private instance (or static) variable 'rows' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:17: The private instance (or static) variable 'cols' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:19: The user-supplied array 'tiles' is stored directly. [ArrayIsStoredDirectly]
Board.java:191: Avoid unused local variables, such as 'it'. [UnusedLocalVariable]
Board.java:192: Avoid unused local variables, such as 'twin'. [UnusedLocalVariable]
Board.java:193: Avoid unused local variables, such as 'bl'. [UnusedLocalVariable]
Board.java:196: Avoid unused local variables, such as 'b2'. [UnusedLocalVariable]
Board.java:197: Avoid unused local variables, such as 'manhattan'. [UnusedLocalVariable]
Board.java:198: Avoid unused local variables, such as 'hamming'. [UnusedLocalVariable]
Solver.java:81: The private instance (or static) variable 'board' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:82: The private instance (or static) variable 'moves' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:83: The private instance (or static) variable 'manhattanPriority' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:84: The private instance (or static) variable 'hammingPriority' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:85: The private instance (or static) variable 'prevNode' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 14 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Board.java
*-----------------------------------------------------------

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:92:45: You should not need to call 'hamming()' in this program. Instead, submit the version with 'manhattan()'. [Performance]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 26 total tests.

Tests 4-7 and 14-17 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
    - student   hamming() = 5
    - reference hamming() = 4
        3
         0  1  3
         4  2  5
         7  8  6


  * puzzle00.txt
  * puzzle07.txt
    - student   hamming() = 5
    - reference hamming() = 4
        3
         1  2  3
         0  7  6
         5  4  8


  * puzzle17.txt
    - student   hamming() = 9
    - reference hamming() = 8
        3
         5  1  8
         2  7  3
         4  0  6


  * puzzle27.txt
    - student   hamming() = 8
    - reference hamming() = 7
        3
         5  8  7
         1  4  6
         3  0  2


  * puzzle2x2-unsolvable1.txt
    - student   hamming() = 3
    - reference hamming() = 2
        2
         1  0
         2  3


==> FAILED

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
    - student   hamming() = 3
    - reference hamming() = 2
        2
         3  2
         0  1


    - failed on trial 1 of 1000

  * 3-by-3
    - student   hamming() = 7
    - reference hamming() = 6
        3
         0  6  3
         1  5  2
         8  7  4


    - failed on trial 1 of 1000

  * 4-by-4
    - student   hamming() = 15
    - reference hamming() = 14
        4
         3  6  8 13
        11 12  2  7
         1 10  0  9
         5 15  4 14


    - failed on trial 1 of 1000

  * 5-by-5
    - student   hamming() = 24
    - reference hamming() = 23
        5
         1 16  7  3  8
         9 24 18 17  2
        19 14  5 12  6
        20 23 10 11 13
        15  0 21  4 22


    - failed on trial 1 of 1000

  * 9-by-9
    - student   hamming() = 79
    - reference hamming() = 78
        9
        49 63 27 14 50 30 69 68 34
        38 62 55  0 45 24  8 67 51
        10  9 12 39 32 65 16 19  7
        15 56 72 31 77 40  4 58 42
        76 26  3  1 20 61  2 44 66
        37 64 47 33 43 52 54 80 71
        60 35 29 57 13 21 53 23 18
        28 75 78 41 48 11 46 73 74
        25 17 22 59 36  5 70 79  6


    - failed on trial 1 of 1000

  * 10-by-10
    - student   hamming() = 99
    - reference hamming() = 98
        10
        25 95 32 67 17 73 80 87 88 47
         9 57 91 86 69 26 58 36 68 21
        43 11 54 79 75 39 84  4 56 37
        93 15 20 62 50 98 72 60 34 92
         8 99 97 38 33 29 40 10 96  1
        14 52 74 51 78 18 65 44 41 85
         3 63 16 35 23 83 76 48  0  7
        66 45 71 77 81 70 89 61  6 27
        46 28  2 42 55 90 64 24 13 30
        53  5 49 59 12 22 82 19 94 31


    - failed on trial 1 of 1000

  * 127-by-127
    - student   hamming() = 16127
    - reference hamming() = 16126

    - failed on trial 1 of 10

==> FAILED

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
    - student   manhattan() = 8
    - reference manhattan() = 4
        3
         0  1  3
         4  2  5
         7  8  6


  * puzzle00.txt
  * puzzle07.txt
    - student   manhattan() = 5
    - reference manhattan() = 7
        3
         1  2  3
         0  7  6
         5  4  8


  * puzzle17.txt
  * puzzle27.txt
    - student   manhattan() = 15
    - reference manhattan() = 17
        3
         5  8  7
         1  4  6
         3  0  2


  * puzzle2x2-unsolvable1.txt
    - student   manhattan() = 1
    - reference manhattan() = 3
        2
         1  0
         2  3


==> FAILED

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
    - student   manhattan() = 3
    - reference manhattan() = 4
        2
         0  1
         2  3


    - failed on trial 3 of 1000

  * 3-by-3
    - student   manhattan() = 19
    - reference manhattan() = 21
        3
         8  0  7
         2  4  5
         6  3  1


    - failed on trial 1 of 1000

  * 4-by-4
    - student   manhattan() = 42
    - reference manhattan() = 36
        4
        15  4  8 10
         1 12  7 11
         0  2 13  9
         5 14  6  3


    - failed on trial 1 of 1000

  * 5-by-5
    - student   manhattan() = 80
    - reference manhattan() = 74
        5
         9  7  6 14  2
        11 12 18 22  1
        10 23 15 20  0
        24 21  3  8  4
        19 16  5 13 17


    - failed on trial 1 of 1000

  * 9-by-9
    - student   manhattan() = 451
    - reference manhattan() = 462
        9
        60 17 55  3 41 28 14 25 33
         8 67  5  1 27 40 53 73 62
        78  2 31 42  4 58 54 10 47
        65 80 23 75  9 63 20 22 11
         6 29 18 79 12 50 43 46 52
        66 30 69 68 36 39 37 19 16
        21 70 71 49 38 51 13 77 32
        24  7 76  0 57 74 44 45 72
        35 34 26 64 15 48 61 56 59


    - failed on trial 1 of 1000

  * 10-by-10
    - student   manhattan() = 656
    - reference manhattan() = 615
        10
        92 82 94 35 68 16 96 79 18 55
        24 22 26 34 45 31 47 15 37 53
        72 95  2 59 41 14 42 28 98 44
        73 50 49 67  9 93  4 76 85 83
        54 12 75 65 51 89 23 77 21 33
        71 57 88 10 78  8  0 86 17 30
        56 36 40 81 61 60 87 80 66 70
         6 32 97 52 74 69  7 90 25 46
        11 39 64  1 63 20  5 38 13  3
        62 27 48 43 19 91 84 58 99 29


    - failed on trial 1 of 1000

  * 127-by-127
    - student   manhattan() = 1379815
    - reference manhattan() = 1372017

    - failed on trial 1 of 10

==> FAILED

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
  * argument is of type String
  * argument is of type UncastableString
  * Board object stored in a variable of type Object
==> passed

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
  * n = 3
  * n = 4
  * 5 <= n < 10
==> passed

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
  * m = 2, n = 5
  * m = 5, n = 3
  * m = 2, n = 3
  * m = 3, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
    - hamming() different before and after changing 2d array
    - before = 8
    - after  = 7
==> FAILED

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check dimension() on a board that is kth neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check hamming() on a board that is kth neighbor of a board
  * 0th neighbor of puzzle27.txt
    - student   hamming() = 8
    - reference hamming() = 7
        3
         5  8  7
         1  4  6
         3  0  2


  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
    - student   hamming() = 8
    - reference hamming() = 7
        3
         5  0  7
         1  8  6
         3  4  2


  * 13th neighbor of puzzle27.txt
    - student   hamming() = 8
    - reference hamming() = 7
        3
         5  8  7
         3  0  6
         4  1  2


  * 13th neighbor of puzzle00.txt
    - student   hamming() = 8
    - reference hamming() = 7
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78 79 80
        81 82 83 84 85 86 87 89 98 90
        91 92 93 94  0 95 96 97 88 99


  * 13th neighbor of puzzle2x2-unsolvable1.txt
    - student   hamming() = 2
    - reference hamming() = 1
        2
         0  2
         3  1


==> FAILED

Test 15: check manhattan() on a board that is a kth neighbor of a board
  * 0th neighbor of puzzle27.txt
    - student   manhattan() = 15
    - reference manhattan() = 17
        3
         5  8  7
         1  4  6
         3  0  2


  * 1st neighbor of puzzle27.txt
    - student   manhattan() = 14
    - reference manhattan() = 16
        3
         5  8  7
         1  4  6
         3  2  0


  * 2nd neighbor of puzzle27.txt
    - student   manhattan() = 17
    - reference manhattan() = 19
        3
         5  8  7
         1  6  0
         3  4  2


  * 13th neighbor of puzzle27.txt
    - student   manhattan() = 16
    - reference manhattan() = 18
        3
         5  8  7
         1  0  4
         3  2  6


  * 13th neighbor of puzzle00.txt
    - student   manhattan() = 21
    - reference manhattan() = 11
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 68 57 59 60
        61 62 63 64 65  0 66 58 69 70
        71 72 73 74 75 76 67 77 78 80
        81 82 83 84 85 86 87 88 79 89
        91 92 93 94 95 96 97 98 99 90


  * 13th neighbor of puzzle2x2-unsolvable1.txt
    - student   manhattan() = 5
    - reference manhattan() = 4
        2
         0  3
         1  2


==> FAILED

Test 16: check hamming() on a board that is a kth twin of a board
  * 0th twin of puzzle27.txt
    - student   hamming() = 8
    - reference hamming() = 7
        3
         5  8  7
         1  4  6
         3  0  2


  * 1st twin of puzzle27.txt
    - student   hamming() = 8
    - reference hamming() = 7
        3
         8  5  7
         1  4  6
         3  0  2


  * 2nd twin of puzzle27.txt
    - student   hamming() = 8
    - reference hamming() = 7
        3
         5  8  7
         1  4  6
         3  0  2


  * 13th twin of puzzle27.txt
    - student   hamming() = 8
    - reference hamming() = 7
        3
         8  5  7
         1  4  6
         3  0  2


  * 13th twin of puzzle00.txt
  * 13th twin of puzzle2x2-unsolvable1.txt
    - student   hamming() = 2
    - reference hamming() = 1
        2
         1  0
         3  2


==> FAILED

Test 17: check manhattan() on a board that is a kth twin of a board
  * 0th twin of puzzle27.txt
    - student   manhattan() = 15
    - reference manhattan() = 17
        3
         5  8  7
         1  4  6
         3  0  2


  * 1st twin of puzzle27.txt
  * 2nd twin of puzzle27.txt
    - student   manhattan() = 15
    - reference manhattan() = 17
        3
         5  8  7
         1  4  6
         3  0  2


  * 13th twin of puzzle27.txt
  * 13th twin of puzzle00.txt
    - student   manhattan() = 3
    - reference manhattan() = 2
        10
         2  1  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78 79 80
        81 82 83 84 85 86 87 88 89 90
        91 92 93 94 95 96 97 98 99  0


  * 13th twin of puzzle2x2-unsolvable1.txt
==> FAILED


Total: 17/26 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2           136                  128
=> passed     3           200                  192
=> passed     4           248                  240
=> passed     8           568                  560
=> passed    12          1016                 1008
=> passed    16          1592                 1584
=> passed    20          2296                 2288
=> passed    37          6864                 6856
=> passed    72         23096                23088
=> passed   120         61496                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 56.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)


================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 1b: check solution() with file inputs
  * puzzle00.txt
    - number of boards in student   solution() = 0
    - number of boards in reference solution() = 1
    - initial board =
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78 79 80
        81 82 83 84 85 86 87 88 89 90
        91 92 93 94 95 96 97 98 99  0

  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> FAILED

Test 2a: check moves() with more file inputs
  * puzzle14.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 2b: check solution() with more file inputs
  * puzzle14.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
    - moves() returns wrong value
    - student   moves() = 10
    - reference moves() = 8
    - initial board =
        3
         1  3  6
         5  0  2
         4  7  8

    - failed on trial 9 of 1000

==> FAILED

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
    - student solution() returns a sequence of moves that leads to goal state
      but not a shortest such sequence
    - number of boards in student   solution() = 11
    - number of boards in reference solution() = 9
    - initial board =
        3
         1  5  2
         7  0  3
         8  4  6

    - failed on trial 28 of 1000

==> FAILED

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
    - student solution() does not return null

  * puzzle2x2-unsolvable2.txt
    - student solution() does not return null

  * puzzle3x3-unsolvable1.txt
    - student solution() does not return null

  * puzzle3x3-unsolvable2.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);

==> FAILED

Test 9a: check that equals() method in Board is called
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9b: check that equals() method in Board is called only
         with an argument of type Board
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9c: check that equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
  * puzzle27.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 10: check that constructor throws exception if board is null
    - throws wrong exception when calling constructor with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 11a: check moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 11b: check solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
    - number of boards in student   solution() = 0
    - number of boards in reference solution() = 1
    - initial board =
        2
         1  2
         3  0

  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> FAILED

Test 12a: check moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 12b: check solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
    - number of boards in student   solution() = 0
    - number of boards in reference solution() = 1
    - initial board =
        3
         1  2  3
         4  5  6
         7  8  0

  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 13a: check moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 13b: check solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
    - number of boards in student   solution() = 0
    - number of boards in reference solution() = 1
    - initial board =
        4
         1  2  3  4
         5  6  7  8
         9 10 11 12
        13 14 15  0

  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 14a: check moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
    - moves() returns wrong value
    - student   moves() = 23
    - reference moves() = 19
    - initial board =
        3
         4  7  2
         0  8  3
         6  1  5

    - failed on trial 8 of 200

  * 200 random 4-by-4 boards that are <= 20 moves from goal
    - moves() returns wrong value
    - student   moves() = 14
    - reference moves() = 12
    - initial board =
        4
         1  2  3  4
         5  6  7  8
        10 13 11 15
         9  0 12 14

    - failed on trial 4 of 200

  * 200 random 5-by-5 boards that are <= 20 moves from goal


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 1 of 200

==> FAILED

Test 14b: check solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
    - number of boards in student   solution() = 0
    - number of boards in reference solution() = 1
    - initial board =
        2
         1  2
         3  0

    - failed on trial 10 of 100

  * 200 random 3-by-3 boards that are <= 20 moves from goal
    - number of boards in student   solution() = 0
    - number of boards in reference solution() = 1
    - initial board =
        3
         1  2  3
         4  5  6
         7  8  0

    - failed on trial 7 of 200

  * 200 random 4-by-4 boards that are <= 20 moves from goal
    - number of boards in student   solution() = 0
    - number of boards in reference solution() = 1
    - initial board =
        4
         1  2  3  4
         5  6  7  8
         9 10 11 12
        13 14 15  0

    - failed on trial 4 of 200

  * 200 random 5-by-5 boards that are <= 20 moves from goal


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 1 of 200

==> FAILED


Total: 7/25 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 12 total tests.

Maximum allowed time per puzzle is 5.0 seconds.
Maximum allowed memory per puzzle = 200000000 bytes.

failed when solving puzzle25.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 20000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Test 1: Measure memory of Solver.

               filename   moves   memory
---------------------------------------------
=> passed  puzzle10.txt      10     4640
=> passed  puzzle15.txt      15     5568
=> passed  puzzle20.txt      20     2752
==> 3/6 tests passed



Test 2: Measure memory of MinPQ.

                              deep              max           ending
               filename     memory             size             size
--------------------------------------------------------------------
=> passed  puzzle10.txt      29896               35               34
=> passed  puzzle15.txt      37328               53               52
=> FAILED  puzzle20.txt  106827784 (299.4x)  287725 (280.2x)  287724 (280.4x)
==> 2/6 tests passed


Total: 5/12 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference Board)
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

failed when solving puzzle23.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 20000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Test 1: Measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
=> passed  puzzle20.txt      20    3     0.47
=> passed  puzzle22.txt      22    3     0.58
=> passed  puzzle21.txt      21    3     0.47
==> 3/25 tests passed



Test 2: Count MinPQ operations

               filename   insert()         delMin()
---------------------------------------------------
=> FAILED  puzzle20.txt     675593 (268.3x)  387869 (259.8x)
=> FAILED  puzzle22.txt     881747 (144.7x)  509817 (140.7x)
=> FAILED  puzzle21.txt     725626 (117.1x)  412877 (113.4x)
==> 0/25 tests passed



Test 3: Count Board operations (that should not get called)

               filename    hamming()   toString()
-------------------------------------------------
=> FAILED  puzzle20.txt          675593  (18.4x)   0
=> FAILED  puzzle22.txt          881747   (8.6x)   0
=> FAILED  puzzle21.txt          725626   (6.9x)   0
==> 0/25 tests passed



Test 4a: Count Board operations (that should get called)

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> FAILED  puzzle20.txt    1063460 (265.5x)    1063450 (265.5x)    1063463  (28.9x)
=> FAILED  puzzle22.txt    1391562 (143.3x)    1391556 (143.3x)    1391565  (13.5x)
=> FAILED  puzzle21.txt    1138501 (115.8x)    1138493 (115.8x)    1138504  (10.8x)
==> 0/25 tests passed



Test 4b: count Board operations (that should get called),
         rejecting if doesn't adhere to stricter caching limits

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> FAILED  puzzle20.txt    1063460 (265.5x)    1063450 (265.5x)    1063463 (265.0x)
=> FAILED  puzzle22.txt    1391562 (143.3x)    1391556 (143.3x)    1391565 (143.2x)
=> FAILED  puzzle21.txt    1138501 (115.8x)    1138493 (115.8x)    1138504 (115.7x)
==> 0/25 tests passed


Total: 3/125 tests passed!


================================================================
