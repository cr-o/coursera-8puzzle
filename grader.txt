See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (6 warnings)
PMD:          FAILED (14 warnings)
Checkstyle:   FAILED (0 errors, 1 warning)

Correctness:  24/51 tests passed
Memory:       5/22 tests passed
Timing:       4/125 tests passed

Aggregate score: 41.15%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
6.8K Feb 25 03:03 Board.java
5.2K Feb 25 03:03 Solver.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac11 Board.java
*-----------------------------------------------------------

% javac11 Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'boardTiles', exposing the internal representation of the class 'Board'. Instead, create a defensive copy of the object referenced by the parameter variable 'tiles' and store that copy in the instance variable 'boardTiles'.  At Board.java:[line 21]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'twin' but that value is never used.  At Board.java:[line 213]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'bl' but that value is never used.  At Board.java:[line 214]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'it' but that value is never used.  At Board.java:[line 212]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'b2' but that value is never used.  At Board.java:[line 217]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'manhattanPriority' is never read. Consider removing it from the class.  At Solver.java:[line 81]
Warnings generated: 6


================================================================


% pmd .
*-----------------------------------------------------------
Board.java:11: You should not need to define more than one array instance variable in this program. [AtMostOneArrayInstanceVariable]
Board.java:16: The private instance (or static) variable 'rows' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:17: The private instance (or static) variable 'cols' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:20: The user-supplied array 'tiles' is stored directly. [ArrayIsStoredDirectly]
Board.java:212: Avoid unused local variables, such as 'it'. [UnusedLocalVariable]
Board.java:213: Avoid unused local variables, such as 'twin'. [UnusedLocalVariable]
Board.java:214: Avoid unused local variables, such as 'bl'. [UnusedLocalVariable]
Board.java:217: Avoid unused local variables, such as 'b2'. [UnusedLocalVariable]
Solver.java:34: Avoid unused local variables, such as 'prevBoard'. [UnusedLocalVariable]
Solver.java:79: The private instance (or static) variable 'board' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:80: The private instance (or static) variable 'moves' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:81: The private instance (or static) variable 'manhattanPriority' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:82: The private instance (or static) variable 'hammingPriority' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:83: The private instance (or static) variable 'prevNode' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 14 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Board.java
*-----------------------------------------------------------

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:90:45: You should not need to call 'hamming()' in this program. Instead, submit the version with 'manhattan()'. [Performance]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 26 total tests.

Tests 4-7 and 14-17 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
    - student   hamming() = 6
    - reference hamming() = 4
        3
         0  1  3
         4  2  5
         7  8  6


  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
    - student   hamming() = 0
    - reference hamming() = 2
        2
         1  0
         2  3


==> FAILED

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
    - student   hamming() = 2
    - reference hamming() = 3
        2
         0  3
         2  1


    - failed on trial 2 of 1000

  * 3-by-3
    - student   hamming() = 7
    - reference hamming() = 5
        3
         0  7  3
         1  4  6
         2  8  5


    - failed on trial 2 of 1000

  * 4-by-4
    - student   hamming() = 14
    - reference hamming() = 15
        4
        11  5  2  0
        14 13  3  7
         1  4  9 10
        15  8  6 12


    - failed on trial 2 of 1000

  * 5-by-5
    - student   hamming() = 22
    - reference hamming() = 23
        5
        13 12  5 16  4
        17  8 14 19 10
         9  0 22 18  6
         2 20 11 15 23
         1  3 21  7 24


    - failed on trial 1 of 1000

  * 9-by-9
    - student   hamming() = 80
    - reference hamming() = 78
        9
        35 61 48 17 60 19 68  9 51
        74 14 13 47 67 72 52 27 12
        30 65 10 43 38 20 41 57 31
        62 24 33 39 78  4 44 76 66
        21 15  6  0 73 69 50 22  8
        26 36 18 63 42 56 34 70 58
        49  2 29 37 16 54 71 40 28
        64 25  5 45 80 59 55 32 23
        77 11 75 79  7  1  3 53 46


    - failed on trial 2 of 1000

  * 10-by-10
    - student   hamming() = 98
    - reference hamming() = 97
        10
        51 72 56 44 15 23 17 29 36 87
        43  9  6 60 27 79 45 62 33 19
        78 92 97 24 63 86 11 68 48 70
         2  3 83 53 28 91 64 14 20 42
        12 30 61 25  5 18 94 93 50 73
        84 10 34 49  7 54 13 81 38 80
        59 96 66 39  1 52  4 37 58 67
        21 77  0 82  8 76 46 35 55 65
        22 26 71 90 75 99 88 16 69 98
        95 47 57 41 85 89 74 32 31 40


    - failed on trial 1 of 1000

  * 127-by-127
    - student   hamming() = 16124
    - reference hamming() = 16126

    - failed on trial 2 of 10

==> FAILED

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
    - student   manhattan() = 8
    - reference manhattan() = 4
        3
         0  1  3
         4  2  5
         7  8  6


  * puzzle00.txt
  * puzzle07.txt
    - student   manhattan() = 11
    - reference manhattan() = 7
        3
         1  2  3
         0  7  6
         5  4  8


  * puzzle17.txt
    - student   manhattan() = 15
    - reference manhattan() = 13
        3
         5  1  8
         2  7  3
         4  0  6


  * puzzle27.txt
    - student   manhattan() = 13
    - reference manhattan() = 17
        3
         5  8  7
         1  4  6
         3  0  2


  * puzzle2x2-unsolvable1.txt
    - student   manhattan() = 4
    - reference manhattan() = 3
        2
         1  0
         2  3


==> FAILED

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
    - student   manhattan() = 5
    - reference manhattan() = 4
        2
         0  1
         2  3


    - failed on trial 1 of 1000

  * 3-by-3
    - student   manhattan() = 14
    - reference manhattan() = 17
        3
         6  0  4
         3  1  5
         2  8  7


    - failed on trial 1 of 1000

  * 4-by-4
    - student   manhattan() = 37
    - reference manhattan() = 43
        4
        10  5  8  6
         3 15 13 12
        14  0  1  9
         2  4 11  7


    - failed on trial 2 of 1000

  * 5-by-5
    - student   manhattan() = 67
    - reference manhattan() = 71
        5
         1 10 20  3 24
         9 14  4  2 17
        15  0  6  7 23
         8  5 11 19 13
        16 21 18 22 12


    - failed on trial 1 of 1000

  * 9-by-9
    - student   manhattan() = 388
    - reference manhattan() = 457
        9
        10 70 73 34 53 79 37 11 14
        49  3 39 36 41 28  6 67 17
        61 57 66  0 16 20  8 48 33
        25 32 45 21 12 80 18 46  1
        35 26 30 40 52 71  9 78 22
        65 76 59 19 55 68 51 58 64
        50 42 56 62 47 44 69  7 72
        24 43 15  2 31 13 29 23 75
        54 74 27  4 38 77 63 60  5


    - failed on trial 1 of 1000

  * 10-by-10
    - student   manhattan() = 543
    - reference manhattan() = 673
        10
        54 24 62 73 67 15 21 40 92 43
        46 38 70 33 94 63 49  7 72 75
         3 83 11 30 89  8 88 53 37 31
        55 99 57 29 12 74 81 60  5  6
        17 48 65 84 25  2 79 95 80 20
        86 41 64 76 42 18 14 23 27 82
        98 87 66  4 16 34 78 52 13  0
        10  1 69 77 32 39 96 35 45 71
        22 58 51 59  9 47 50 44 91 28
        97 26 36 68 61 85 19 93 56 90


    - failed on trial 1 of 1000

  * 127-by-127
    - student   manhattan() = 1032131
    - reference manhattan() = 1359915

    - failed on trial 1 of 10

==> FAILED

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
  * argument is of type String
  * argument is of type UncastableString
  * Board object stored in a variable of type Object
==> passed

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
  * n = 3
  * n = 4
  * 5 <= n < 10
==> passed

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
  * m = 2, n = 5
  * m = 5, n = 3
  * m = 2, n = 3
  * m = 3, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
    - manhattan() different before and after changing 2d array
    - before = 14
    - after  = 15

==> FAILED

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check dimension() on a board that is kth neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check hamming() on a board that is kth neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
    - student   hamming() = 20
    - reference hamming() = 9
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 77  0 78 79 80
        81 82 83 84 85 76 86 98 88 89
        91 92 93 94 95 96 87 97 99 90


  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> FAILED

Test 15: check manhattan() on a board that is a kth neighbor of a board
  * 0th neighbor of puzzle27.txt
    - student   manhattan() = 13
    - reference manhattan() = 17
        3
         5  8  7
         1  4  6
         3  0  2


  * 1st neighbor of puzzle27.txt
    - student   manhattan() = 13
    - reference manhattan() = 16
        3
         5  8  7
         1  4  6
         3  2  0


  * 2nd neighbor of puzzle27.txt
    - student   manhattan() = 16
    - reference manhattan() = 17
        3
         5  8  7
         1  4  0
         3  2  6


  * 13th neighbor of puzzle27.txt
    - student   manhattan() = 14
    - reference manhattan() = 18
        3
         8  4  7
         5  0  6
         1  3  2


  * 13th neighbor of puzzle00.txt
    - student   manhattan() = 67
    - reference manhattan() = 7
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78 79 80
        81 82 83 84 85  0 87 98 88 89
        91 92 93 94 95 86 96 97 99 90


  * 13th neighbor of puzzle2x2-unsolvable1.txt
    - student   manhattan() = 3
    - reference manhattan() = 2
        2
         3  2
         1  0


==> FAILED

Test 16: check hamming() on a board that is a kth twin of a board
  * 0th twin of puzzle27.txt
  * 1st twin of puzzle27.txt
  * 2nd twin of puzzle27.txt
  * 13th twin of puzzle27.txt
  * 13th twin of puzzle00.txt
  * 13th twin of puzzle2x2-unsolvable1.txt
    - student   hamming() = 2
    - reference hamming() = 1
        2
         1  0
         3  2


==> FAILED

Test 17: check manhattan() on a board that is a kth twin of a board
  * 0th twin of puzzle27.txt
    - student   manhattan() = 13
    - reference manhattan() = 17
        3
         5  8  7
         1  4  6
         3  0  2


  * 1st twin of puzzle27.txt
    - student   manhattan() = 13
    - reference manhattan() = 17
        3
         8  5  7
         1  4  6
         3  0  2


  * 2nd twin of puzzle27.txt
    - student   manhattan() = 13
    - reference manhattan() = 17
        3
         5  8  7
         1  4  6
         3  0  2


  * 13th twin of puzzle27.txt
    - student   manhattan() = 13
    - reference manhattan() = 17
        3
         8  5  7
         1  4  6
         3  0  2


  * 13th twin of puzzle00.txt
  * 13th twin of puzzle2x2-unsolvable1.txt
    - student   manhattan() = 2
    - reference manhattan() = 1
        2
         1  0
         3  2


==> FAILED


Total: 17/26 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> FAILED     2           248                  128
=> FAILED     3           376                  192
=> FAILED     4           472                  240
=> FAILED     8          1112                  560
=> FAILED    12          2008                 1008
=> FAILED    16          3160                 1584
=> FAILED    20          4568                 2288
=> FAILED    37         13704                 6856
=> FAILED    72         46168                23088
=> FAILED   120        122968                61488
==> 0/10 tests passed

Total: 0/10 tests passed!

Student   memory = 8.00 n^2 + 64.00 n + 88.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)


================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 1b: check solution() with file inputs
  * puzzle00.txt
    - number of boards in student   solution() = 0
    - number of boards in reference solution() = 1
    - initial board =
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78 79 80
        81 82 83 84 85 86 87 88 89 90
        91 92 93 94 95 96 97 98 99  0

  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> FAILED

Test 2a: check moves() with more file inputs
  * puzzle14.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 2b: check solution() with more file inputs
  * puzzle14.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
    - moves() returns wrong value
    - student   moves() = 10
    - reference moves() = 8
    - initial board =
        3
         1  6  2
         5  0  3
         4  7  8

    - failed on trial 14 of 1000

==> FAILED

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
    - student solution() returns a sequence of moves that leads to goal state
      but not a shortest such sequence
    - number of boards in student   solution() = 11
    - number of boards in reference solution() = 9
    - initial board =
        3
         1  5  2
         7  0  3
         8  4  6

    - failed on trial 15 of 1000

==> FAILED

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);

==> FAILED

Test 9a: check that equals() method in Board is called
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9b: check that equals() method in Board is called only
         with an argument of type Board
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9c: check that equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        3
         4  1  3
         0  2  5
         7  6  8

    - board 2:
        3
         0  1  3
         4  2  5
         7  6  8

  * puzzle05.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        3
         1  4  3
         7  2  6
         0  5  8

    - board 2:
        3
         1  4  3
         0  2  6
         7  5  8

  * puzzle10.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        9
         2  1  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64 74 65 67 68 78 69 70 72
        73  0 66 75 76 77 79 71 80

    - board 2:
        9
         2  1  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 69 70 72
        73 74 66 75 76 77 79 71 80

  * puzzle27.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        3
         8  5  7
         1  4  6
         3  2  0

    - board 2:
        3
         8  5  7
         1  4  6
         3  0  2

==> FAILED

Test 10: check that constructor throws exception if board is null
    - throws wrong exception when calling constructor with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 11a: check moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 11b: check solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
    - number of boards in student   solution() = 0
    - number of boards in reference solution() = 1
    - initial board =
        2
         1  2
         3  0

  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> FAILED

Test 12a: check moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 12b: check solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
    - number of boards in student   solution() = 0
    - number of boards in reference solution() = 1
    - initial board =
        3
         1  2  3
         4  5  6
         7  8  0

  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 13a: check moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 13b: check solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
    - number of boards in student   solution() = 0
    - number of boards in reference solution() = 1
    - initial board =
        4
         1  2  3  4
         5  6  7  8
         9 10 11 12
        13 14 15  0

  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 14a: check moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 38 of 200

==> FAILED

Test 14b: check solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
    - number of boards in student   solution() = 0
    - number of boards in reference solution() = 1
    - initial board =
        2
         1  2
         3  0

    - failed on trial 1 of 100

  * 200 random 3-by-3 boards that are <= 20 moves from goal


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 12 of 200

==> FAILED


Total: 7/25 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 12 total tests.

Maximum allowed time per puzzle is 5.0 seconds.
Maximum allowed memory per puzzle = 200000000 bytes.

failed when solving puzzle25.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 20000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Test 1: Measure memory of Solver.

               filename   moves   memory
---------------------------------------------
=> passed  puzzle10.txt      10     4640
=> passed  puzzle15.txt      15     5568
=> passed  puzzle20.txt      20     2752
==> 3/6 tests passed



Test 2: Measure memory of MinPQ.

                              deep              max           ending
               filename     memory             size             size
--------------------------------------------------------------------
=> passed  puzzle10.txt      29896               35               34
=> passed  puzzle15.txt      37328               53               52
=> FAILED  puzzle20.txt  142682336 (399.9x)  510070 (496.7x)  510069 (497.1x)
==> 2/6 tests passed


Total: 5/12 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference Board)
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

failed when solving puzzle24.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 20000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Test 1: Measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
=> passed  puzzle20.txt      20    3     0.50
=> passed  puzzle22.txt      22    3     0.63
=> passed  puzzle21.txt      21    3     0.49
=> passed  puzzle23.txt      23    3     2.52
==> 4/25 tests passed



Test 2: Count MinPQ operations

               filename   insert()         delMin()
---------------------------------------------------
=> FAILED  puzzle20.txt     897938 (356.6x)  387869 (259.8x)
=> FAILED  puzzle22.txt    1159445 (190.3x)  509817 (140.7x)
=> FAILED  puzzle21.txt     944519 (152.4x)  412877 (113.4x)
=> FAILED  puzzle23.txt    4219432 (455.0x) 1879297 (341.0x)
==> 0/25 tests passed



Test 3: Count Board operations (that should not get called)

               filename    hamming()   toString()
-------------------------------------------------
=> FAILED  puzzle20.txt          897938  (24.4x)   0
=> FAILED  puzzle22.txt          1159445  (11.3x)   0
=> FAILED  puzzle21.txt          944519   (9.0x)   0
=> FAILED  puzzle23.txt          4219432  (26.7x)   0
==> 0/25 tests passed



Test 4a: Count Board operations (that should get called)

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> FAILED  puzzle20.txt    1091874 (272.6x)    1091868 (272.6x)    1285808  (34.9x)
=> FAILED  puzzle22.txt    1414549 (145.7x)    1414545 (145.7x)    1669263  (16.3x)
=> FAILED  puzzle21.txt    1151058 (117.1x)    1151053 (117.1x)    1357397  (12.9x)
=> FAILED  puzzle23.txt    5159247 (349.1x)    5159242 (349.1x)    6098730  (38.6x)
==> 0/25 tests passed



Test 4b: count Board operations (that should get called),
         rejecting if doesn't adhere to stricter caching limits

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> FAILED  puzzle20.txt    1091874 (272.6x)    1091868 (272.6x)    1285808 (320.4x)
=> FAILED  puzzle22.txt    1414549 (145.7x)    1414545 (145.7x)    1669263 (171.8x)
=> FAILED  puzzle21.txt    1151058 (117.1x)    1151053 (117.1x)    1357397 (137.9x)
=> FAILED  puzzle23.txt    5159247 (349.1x)    5159242 (349.1x)    6098730 (412.5x)
==> 0/25 tests passed


Total: 4/125 tests passed!


================================================================


